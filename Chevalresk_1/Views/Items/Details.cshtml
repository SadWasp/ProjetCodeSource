@{
    Chevalresk_1.Models.UserView onlineUser = Chevalresk_1.Models.OnlineUsers.GetSessionUser();
}
@model Chevalresk_1.Models.ItemView

@{
    ViewBag.Title = "Détails de l'item";
}
<h2>
    @ViewBag.Title
    @Helper.GlyphiconAction("Index", "glyphicon-arrow-up", "Retour à la liste")
    @if (onlineUser != null && onlineUser.Admin)
    {
        @*@Helper.GlyphiconAction("Edit/" + Model.Id, "glyphicon-edit", "Modifier " + Model.Name)*@
        @Helper.GlyphiconAction("Delete/" + Model.Id, "glyphicon-remove-circle", "Effacer " + Model.Name)
    }

</h2>

<dd>
    @Helper.RatingBar("rater_" + Model.Id, Model.RatingsAverage, true) &nbsp;<span>@Model.RatingsAverage.ToString("0.0")</span>&nbsp;<span>(@Model.NbRatings)</span><br />
</dd>


<div>
    <hr />
    <dl class="dl-horizontal" >
        <dt>
            @Html.DisplayNameFor(model => model.Name)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Name)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Prix)
        </dt>

        <dd>
            @String.Format("{0}", @Html.DisplayFor(model => model.Prix))$
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.QuantiteStock)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.QuantiteStock)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Type)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Type)
        </dd>
        @if (Model.Type == Chevalresk_1.Models.typeItem.Arme)
        {
            <dt>
                @Html.DisplayNameFor(model => model.genreArme)
            </dt>

            <dd>
                @ViewBag.genreArme
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.efficaciteArme)
            </dt>
            <dd>
                @ViewBag.efficacite
            </dd>
        }
        else if (Model.Type == Chevalresk_1.Models.typeItem.Armure)
        {
            <dt>
                @Html.DisplayNameFor(model => model.poids)
            </dt>

            <dd>
                @ViewBag.Poids
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.matiere)
            </dt>

            <dd>
                @ViewBag.matiere
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.taille)
            </dt>

            <dd>
                @ViewBag.taille
            </dd>
        }
        else if (Model.Type == Chevalresk_1.Models.typeItem.Potion)
        {
            <dt>
                @Html.DisplayNameFor(model => model.effet)
            </dt>

            <dd>
                @ViewBag.effet
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.duree)
            </dt>

            <dd>
                @ViewBag.duree
            </dd>
        }
        else if (Model.Type == Chevalresk_1.Models.typeItem.Ressource)
        {
            <dt>
                @Html.DisplayNameFor(model => model.description)
            </dt>

            <dd>
                @ViewBag.description
            </dd>
        }
        <dd>
            <div class="photoFixedSize">
                @Helper.ImageFixedSize2(Url.Content(Model.GetImageURL()), Model.Name)
            </div>
        </dd>

        @using (Html.BeginForm("Add", "Paniers"))
        {
            @Html.HiddenFor(model => model.Id)
            
            if (Model.QuantiteStock > 0 && onlineUser != null)
            {
                <label for="quantite">Quantité</label>
                @Html.DropDownList("quantite", new SelectList(ViewBag.Nbs), new { style = "color:black; font-weight:bold" } )
            
                <input type="submit" value="Ajouter au panier" style="color:black; font-weight:bold"/>
            }
        }



    </dl>
</div>

<div>
    <dt>
        Commentaires
    </dt>
    <hr />

    @if (!ViewBag.AlreadyRated && onlineUser != null && ViewBag.CanCreate)
    {
        @Helper.FlashButton("Create/" + Model.Id, "Ratings", "iconPlus", "Create", "bottom")
    }

    <div>
        @{
            ViewBag.ShowCrudCommand = false;
            Html.RenderPartial("~/Views/Ratings/AverageGraph.cshtml", (IEnumerable<double>)ViewBag.RatingsSpread);

            Html.RenderPartial("~/Views/Ratings/CommentsList.cshtml", (IEnumerable<Chevalresk_1.Models.RatingView>)ViewBag.Ratings);
        }
    </div>

</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/selections")
    @Scripts.Render("~/bundles/imageUploader")

    <script>
         $(function () {
             InstallPeriodicRefreshTask();
             /*
             $("#add-comment").click(function () {
                 CreateComment();
             });
             $("#comment").keypress(function (e) {
                 let key = e.keyCode;
                 if (key === 13)
                     CreateComment();
             });
             */
             $(".star").click(function () { ChangeRating(); });
         })

        function InstallPeriodicRefreshTask() {
            RefreshCommentsList();
            RefreshRatingAverage();
        }

        function ChangeRating() {
            let newRating = $(".RatingBarContainer .fullStar").length;
            let url = "@Url.Action("Change","Ratings")";
            $.ajax({
                 type: "POST",
                 url: url,
                 data: {ItemId : $("#Id").val(), Value : newRating},
                 success: function (response) {
                      RefreshRatingAverage();
                 }
            });
        }

        function CreateComment() {
            let r = $("#comment").val().replace(/[^\x00-\xFF]/g, "");
            $("#comment").val(r);
            let url = "@Url.Action("Create","Comments")";
            $.ajax({
                 type: "POST",
                 url: url,
                data: { ItemId : $("#Id").val(), Text : $("#comment").val()},
                 success: function (response) {
                     $("#comment").val("");
                     RefreshCommentsList();
                 }
            });
        }
        function DeleteComment(id) {
            let url = "@Url.Action("Delete","Comments")";
             $.ajax({
                 type: "POST",
                 url: url,
                 data: {id : id},
                 success: function (response) {
                     RefreshCommentsList();
                 }
            });
        }

        function CheckIfMustRefreshComments() {
             $.ajax({
                type: "GET",
                url: "@Url.Action("MustRefresh","Comments")",
                 success: function (response) {
                     if (response.mustRefresh)
                        RefreshCommentsList();
                }
            });
        }
        function CheckIfMustRefreshRatings() {
             $.ajax({
                type: "GET",
                url: "@Url.Action("MustRefresh","Ratings")",
                 success: function (response) {
                     if (response.mustRefresh)
                        RefreshRatingAverage();
                }
            });
        }

        function RefreshCommentsList() {
            let url = "@Url.Action("CommentsList","Comments")" + "?ItemId=" + $("#Id").val();
            $.ajax({
                type: "GET",
                url: url,
                dataType: "html",
                success: function (html) {
                    $("#commentsContainersGrid").html(html);
                    $(".delete-comment").click(function () {
                        let id = $(this).attr("id").split("_")[1];
                        if (confirm("Effacer ce commentaire?"))
                            DeleteComment(id);
                    });
                }
            });
        }
        function RefreshRatingAverage() {
            let url = "@Url.Action("RatingsAverage","Ratings")" + "?ItemId=" + $("#Id").val();
            $.ajax({
                type: "GET",
                url: url,
                dataType: "html",
                success: function (html) {
                    $("#RatingAverageContainer").html(html);
                    BindRatingBar("Average");
                }
            });
        }
    </script>
}


